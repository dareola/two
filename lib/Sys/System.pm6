

unit module Sys::System:ver<0.0.0>:auth<Domingo Areola (dareola@gmail.com)>;

    use Sys::Database;
    use Template::Mustache;


  class X::Sys::System is Exception {
        has $.msg-id; #message class
        has $.msg-no; #message number
        has $.msg-ty; #message type = [A, E, I, S, W]
        has $.msg-t1; #message text 1
        has $.msg-t2; #message text 2
        has $.msg-t3; #message text 3
        has $.msg-t4; #message text 4

        method message() {
          #-- TODO: Get the message from the data dictionary

          "$.msg-id" ~ "-" ~ $.msg-no ~ " " ~
          "$.msg-ty " ~
          "$.msg-t1 $.msg-t2 $.msg-t3 $.msg-t4"; # Generic error
        }
      }


class Sys::System is export {
        constant $C_NAMESPACE = 'Sys';
        constant $C_LIBPATH = './lib';
        constant $C_WEBFORM = 'WEBC';
        constant $C_DBTYPE_SQLITE = 'SQLite';
        constant $C_OK = 'OK';
        constant $C_ICON_OK = 'themes/img/icons/tick.png';
        constant $C_ICON_FIRST = 'themes/img/icons/resultset_first.png';
        constant $C_ICON_PREV = 'themes/img/icons/resultset_previous.png';
        constant $C_ICON_NEXT = 'themes/img/icons/resultset_next.png';
        constant $C_ICON_LAST = 'themes/img/icons/resultset_last.png';
        constant $C_ICON_LOGIN = 'themes/img/icons/key.png';
        constant $C_ICON_REGISTER = 'themes/img/icons/user_add.png';
        constant $C_ICON_SAVEREG = 'themes/img/icons/disk.png';

        constant $C_INIT = 'INIT';

        has %.Params = ();
        has $.DebugInfo is rw = "";
        has $.FORM is rw = '';
        has $.App is rw =  '';
        has $.Dbu is rw = '';
        has %.Config is rw;
        has $.UserID is rw;
        has $.UserCommand is rw;
        has $.AllowShortcut is rw = 'X';
        has Str %.CMD = (
            "init" => $C_INIT
        );

        #-- BEGIN - While DATABASE  NOT YET EXISTING
        #-- Temporary query this for testing modules
        has Str %.APPTABLE = ( #-- Autogenerated modules
          'DB00' => 'Database',
          'LOGIN' => 'Login',
        );
        has Str %.APPGROUP = (
          'DB00' => 'WEBA', #-- Utilities (Web interface) - WEBA does not have form control
          'LOGIN' => 'WEBC', #-- Login screen
        );

        has Str %.APPSCREEN = (
          'HOME' => '1000',
          'LOGIN' => '1000',
          'INDEX' => '1000',
          'HELP' => '1000',
          'LOGOUT' => '1000',
        );

        #has Str %.APPTEXTS = ( #-- for the Exception
        #  'DB00' => 'D0',
        #  'SCUT' => 'S2',
        #  'TEST' => 'T1',
        #);
        #-- BEGIN - While DATBAE  NOT YET EXISTING

        has %.PAGEVARS = #-- Page variable for Template::Mustache
        ( POPUP_MENU      => '{{POPUP_MENU}}',
          PAGE_TITLE      => '{{PAGE_TITLE}}',
          SITE_TITLE      => '{{SITE_TITLE}}',
          SUB_PAGE_TITLE  => '{{SUB_PAGE_TITLE}}',
          SITE_LOGO       => '{{SITE_LOGO}}',
          MENU_BAR        => '{{MENU_BAR}}',
          MESSAGE_BAR     => '{{MESSAGE_BAR}}',
          WIKIMENU_BAR    => '{{WIKIMENU_BAR}}',
          PAGE_EDITOR     => '{{PAGE_EDITOR}}',
          DATE_TODAY      => '{{DATE_TODAY}}',
          MENU_SECTION    => '{{MENU_SECTION}}',
          SIDE_BAR        => '{{SIDE_BAR}}',
          PAGE_CONTENTS   => '{{PAGE_CONTENTS}}',
          SCRUM_PROJECT   => '{{SCRUM_PROJECT}}',
          PAGE_FOOTER     => '{{PAGE_FOOTER}}',
          FOOT_NOTES      => '{{FOOT_NOTES}}',
          FOOTER_MENU_BAR => '{{FOOTER_MENU_BAR}}',
          SEARCH_BOX      => '{{SEARCH_BOX}}',
          JAVASCRIPT      => '{{JAVASCRIPT}}',
          STYLESHEET      => '{{STYLESHEET}}',
          DEBUGINFO       => '{{DEBUGINFO}}',
          JSCRIPT_DIR     => '{{JSCRIPT_DIR}}',
          CSS_DIR         => '{{CSS_DIR}}',
        );

        my Str $STYLESHEET = q:to/DEFAULT_PAGE_STYLE/;
        <link rel="stylesheet" type="text/css" href="{{{CSS_DIR}}}">
        DEFAULT_PAGE_STYLE
        my Str $JAVASCRIPT = q:to/DEFAULT_JAVASCRIPT/;
        <script language="JavaScript" src="{{{JSCRIPT_DIR}}}" type="text/javascript"></script>{{{JAVASCRIPT}}}
        DEFAULT_JAVASCRIPT

        my Str $PAGETMPL = q:to/DEFAULT_PAGE_TEMPLATE/;
        <tt>{{{DEBUGINFO}}}</tt><table border="0" cellspacing="0" width="100%" cellpadding="0">
        <tr><td bgcolor="#cccccc"><table border="0" width="100%" cellspacing="0" cellpadding="0">
        <tr><td align="left" valign="bottom">{{{POPUP_MENU}}}</td></tr>
        <tr><td align="left" valign="top">&nbsp;&nbsp;<span class="page_title">{{{PAGE_TITLE}}}</span>&nbsp;<span class="subpage_title">{{{SUB_PAGE_TITLE}}}</span></td></tr>
        </table>
        </td><td align="right" valign="bottom" bgcolor="#cccccc">{{{PAGE_EDITOR}}}&nbsp;&nbsp;{{{SITE_LOGO}}}&nbsp;&nbsp;</td></tr>
        </table>
        <table cellspacing="0" cellpadding="2" width="100%" border="0"><tbody><tr><td valign="center" align="left" width="70%"  bgcolor="#000000"></td><td valign="center" align="right" width="70%"  bgcolor="#000000"></td></tr></tbody></table>
        <table border="0" cellspacing="0" width="100%" cellpadding="0">
        <tr><td colspan="2" bgcolor="#cccccc">&nbsp;&nbsp;{{{MENU_BAR}}}</td><td bgcolor="#cccccc" align="right">{{{WIKIMENU_BAR}}}&nbsp;&nbsp;<span class="pagemenu">&nbsp;&nbsp;{{{DATE_TODAY}}}&nbsp;&nbsp;</span></td></tr>
        </table>
        <table border="0" cellspacing="1" width="100%" cellpadding="2">
        <tr><td colspan="2"><div id="navcontainer">&nbsp;&nbsp;{{{MENU_SECTION}}}&nbsp;{{{SIDE_BAR}}}</div>{{{PAGE_CONTENTS}}}{{{SCRUM_PROJECT}}}</td><td></td></tr>
        <tr><td colspan="2"><br/><br/>&nbsp;&nbsp;{{{PAGE_FOOTER}}}&nbsp;&nbsp;{{{FOOT_NOTES}}}</td><td bgcolor="#cccccc"></td></tr>
        <tr><td colspan="2">{{{MESSAGE_BAR}}}&nbsp;&nbsp;{{{SEARCH_BOX}}}</td><td></td></tr>
        <tr><td colspan="2" bgcolor="#cccccc">&nbsp;&nbsp;{{{PAGE_EDITOR}}}&nbsp;&nbsp;{{{FOOTER_MENU_BAR}}}&nbsp;{{{WIKIMENU_BAR}}}</td><td bgcolor="#cccccc"></td></tr>
        </table>
        DEFAULT_PAGE_TEMPLATE

        has $.SCREEN is rw = "";
        has %.SCREEN_TITLE is rw = (
          1000 => "TESTING_1000";
        );
        method main($App, Str :$userid, Str :$ucomm, :%params) {
          self.TRACE: 'SYS00.main: ' 
          ~ 'app = ' ~ $App ~ '; '
          ~ 'cmd = ' ~ $ucomm ~ '; '
          ~ 'userid = ' ~ $userid ~ '; ';
          
          $.UserCommand = $ucomm;
          %.Params = %params;
          $.UserID = $userid;
          $.App = $App.uc;

          my Str $kv = '';
          for %.Params.sort -> (:$key, :$value) {
            given $key.lc {
              when 'text' {
                $kv ~= '<b>text' ~ '</b>=' ~ '...[skiptext]; ';
              }
              default {
              $kv ~= '<b>' ~ $key ~ '</b>=' ~ $value ~ '; '; 
              }
            }
          }
          self.TRACE: 'SYS00.main.Parameters: ' ~ $kv;
          #self.TRACE: 'APPLICATION ID: ' ~ $.App;

          my $next-screen = '';
          given $.App {
            when 'LOGIN' { #-- User login
              given $.UserCommand {
                when 'INIT' {
                  $next-screen = '1000';
                }
                when 'VERIFY' {
                 
                  if %.Params<register> {
                    $.UserCommand = 'REGISTER';
                    $next-screen = '2000';
                  }
                  else {
                    $.UserCommand = 'INVALID_PASSWORD';
                    $next-screen = '1000';
                  }
                }
              }
            }  
          }
          self.TRACE: 'User Command: ' ~ $.UserCommand;
          #-- todo: Get screen for application
          self.goto-screen(app => $.App, screen => $next-screen);

        }
        method goto-screen(Str :$app, Str :$screen = '') {
          my Str $next-screen = '';
          my Str $application-screen = '';
          my $App = '';
          if $screen ne '' {
            $next-screen = $screen;
          }
          else {
            $next-screen = %.APPSCREEN{"$app"}.Str if defined %.APPSCREEN{"$app"};
            $next-screen = '1000' if $next-screen eq '';
          }
          $application-screen = $app ~ '-screen_' ~ $next-screen;
          if self.can($application-screen) {
            
            #self.TRACE: 'Calling method ' ~ $application-screen;
            
            self."$application-screen"();
          }
          else {
            #self.TRACE: 'TODO: Generate module for shortcut ' ~ $app; 

            #-- begin - attempt to load an application
            my Str $program = '',
            my Str $progtxt = '';
            my Str $app-group = '';
            ($program, $progtxt, $app-group) = $.Dbu.is-shortcut(shortcut => $app);

            #self.TRACE: 'FOUND program ' ~ $program ~ '; text ' ~ $progtxt ~ '; group = ' ~ $app-group;

            if $program ne '' {
              if self.load-module($App, module => $program) {
                #self.TRACE: 'Successfully loaded ' ~ $program;

                self.BEGIN-FORM(appgroup => $app-group);

                #-- Try calling the main program of $App
                try $App.main(self, userid => $.UserID,
                                ucomm => $.UserCommand,
                                params => %.Params);
                if ($!) {
                  self.TRACE: 'Error occured on module ' ~ $program ~ '; ' 
                             ~ $!.message ~ '; ' 
                             ~ $!.gist;
                }
                else {
                    #self.FT(tag => 'MESSAGE_BAR', 
                    #        text => 'i: Module <b>' ~ $program 
                    #                                ~ '</b> was loaded successfully', last => 1);
                    $.DebugInfo ~= $App.DebugInfo if $App.DebugInfo ne '';
                }

                self.END-FORM(app => $.App, appgroup => $app-group);

              }
            } 
            
            #-- end - attempt to load an application
            else {

              #-- todo: Generate application module

              #self.TRACE: 'METHOD_NOT_FOUND: ' ~ $application-screen;
              
              self.SCREEN_not_found(app => $application-screen);
            
            }
          }
        }
        method SCREEN_not_found(Str :$app='') {
          my Str $home-link = '';
          my Str $index-link = '';
          my Str $help-link = '';
          my Str $login-link = '';
          my Str $logout-link = '';

          $home-link = '<a href="/">home</a>' ~ '&nbsp;';

          self.FT(tag => 'PAGE_TITLE', text => 'Error: method <b>' ~ $app ~ '</b> implementation not found');
          self.FT(tag => 'SITE_LOGO', text => self.site-logo());
          self.FT(tag => 'PAGE_EDITOR', text => $.UserID);

          self.FT(tag => 'MENU_BAR', text => $home-link);
          
          
        }
        method HOME-screen_1000() { #-- System Module
          my Str $home-link = '';
          my Str $index-link = '';
          my Str $help-link = '';
          my Str $login-link = '';
          my Str $logout-link = '';
          my Str $wiki-link = '';

          $home-link = '<a href="/">home</a>' ~ '&nbsp;';
          $index-link = '&nbsp;<a href="/index">index</a>' ~ '&nbsp;'; # if $.UserID ne '';
          $login-link = '|&nbsp;<a href="/login">login</a>' ~ '&nbsp;' if $.UserID eq '';
          $logout-link = '|&nbsp;<a href="/logout">logout</a>' ~ '&nbsp;' if $.UserID ne '';
          $help-link = '|&nbsp;<a href="/help">help</a>' ~ '&nbsp;';# if $.UserID ne '';
          $wiki-link = '|&nbsp;<a href="/wiki">wiki</a>' ~ '&nbsp;';# if $.UserID ne '';

          self.FT(tag => 'PAGE_TITLE', text => 'app: System');
          self.FT(tag => 'SITE_LOGO', text => self.site-logo());
          self.FT(tag => 'PAGE_EDITOR', text => $.UserID);

          self.FT(tag => 'MENU_BAR', text => $home-link);
          self.FT(tag => 'MENU_BAR', text => $wiki-link);
          
          self.FT(tag => 'WIKIMENU_BAR', text => $index-link);
          self.FT(tag => 'WIKIMENU_BAR', text => $help-link);
          self.FT(tag => 'WIKIMENU_BAR', text => $login-link);
          self.FT(tag => 'WIKIMENU_BAR', text => $logout-link);

          if $.UserID ne '' {
            self.BEGIN-FORM(appgroup => $C_WEBFORM);
            self.FORM-BREAK();
            self.FORM-BREAK();      
            self.END-FORM(app => $.App, appgroup => $C_WEBFORM);
          }
          else {
            self.BEGIN-FORM(appgroup => $C_WEBFORM);
            self.FORM-IMG-BUTTON(key => 'press-first',
              src => $C_ICON_FIRST,
              alt => 'First');

            self.FORM-IMG-BUTTON(key => 'press-prev',
              src => $C_ICON_PREV,
              alt => 'Previous');

            self.FORM-IMG-BUTTON(key => 'press-next',
              src => $C_ICON_NEXT,
              alt => 'Next');

            self.FORM-IMG-BUTTON(key => 'press-last',
              src => $C_ICON_LAST,
              alt => 'Last');
            self.FORM-BREAK();
            self.FORM-BREAK();      
            self.END-FORM(app => $.App, appgroup => $C_WEBFORM);
          }
        }
        method LOGIN-screen_1000() { #-- System Module
          my Str $home-link = '';
          my Str $index-link = '';
          my Str $help-link = '';
          my Str $login-link = '';

          $home-link = '<a href="/">home</a>' ~ '&nbsp;';
          $index-link = '|&nbsp;<a href="/index">index</a>' ~ '&nbsp;' if $.UserID ne '';
          $login-link = '|&nbsp;<a href="/login">login</a>' ~ '&nbsp;' if $.UserID eq '';

          self.FT(tag => 'PAGE_TITLE', text => 'System login');
          self.FT(tag => 'SITE_LOGO', text => self.site-logo());
          self.FT(tag => 'PAGE_EDITOR', text => $.UserID);

          self.FT(tag => 'MENU_BAR', text => $home-link);
          self.FT(tag => 'MENU_BAR', text => $login-link);


          self.TRACE: 'User command: ' ~ $.UserCommand;


          given $.UserCommand {
            when 'INIT' {


              self.BEGIN-FORM(appgroup => $C_WEBFORM);

              self.FORM-IMG-BUTTON(key => 'press-login',
                src => $C_ICON_LOGIN,
                alt => 'Login');
              self.FORM-SPACE();

              self.FORM-IMG-BUTTON(key => 'press-register',
                          src => $C_ICON_REGISTER,
                          alt => 'Register');


              self.FORM-BREAK();
              self.FORM-BREAK();      

              my $clntnum-text = $.Dbu.field-text(field => 'CLNTUSER-CLNTNUM', type => 'S');
              self.FORM-STRING(text => $clntnum-text);
              self.FORM-SPACE;

              my %wSelectOptions = ();
              self.FORM-SELECT(key => 'CLNTUSER-CLNTNUM',
                                value => '000',
                                options => %wSelectOptions,
                                label => 'Client number');

              self.FORM-BREAK();

              my $usercod-text = $.Dbu.field-text(field => 'CLNTUSER-USERCOD', type => 'S');
              self.FORM-STRING(text => $usercod-text);

              self.FORM-SPACE;
              self.FORM-TEXT(key => 'CLNTUSER-USERCOD', value => '', size => '18', length => '18'); 



              my $password-field = self.encrypt-field('PASSWORD');
              my $javascript = '<script type="text/javascript">' 
                            ~ "\n"
                            ~ '//<![CDATA[' 
                            ~ "\n";
                $javascript ~= $password-field 
                            ~ "\n";
                $javascript ~= self.encrypt-md5();
                $javascript ~= '//]]'
                            ~ "\n" 
                            ~ '</script>';
              self.FT(tag => 'JAVASCRIPT', text => $javascript); #-- This will insert javascript code header


              self.FORM-BREAK();

              my $passwrd-text = $.Dbu.field-text(field => 'CLNTUSER-PASSWRD', type => 'S');
              self.FORM-STRING(text => $passwrd-text);
              self.FORM-SPACE;

              #-- encoded password is 32 characters
              self.FORM-PASSWORD(key => 'PASSWORD',
                                  value => '',
                                  size => '32',
                                  length => '15',
                                  event => 'onChange',
                                  action => 'javascript:encryptPassword_' 
                                            ~ 'PASSWORD' ~ '();'
                        );

              self.FORM-BREAK();
              my $langiso-text = $.Dbu.field-text(field => 'CLNTUSER-LANGISO', type => 'S');
              self.FORM-STRING(text => $langiso-text);
              self.FORM-SPACE;
              %wSelectOptions = ();
              self.FORM-SELECT(key => 'CLNTUSER-LANGISO',
                                value => 'E',
                                options => %wSelectOptions,
                                label => 'Language');





              self.END-FORM(app => $.App, appgroup => $C_WEBFORM);
            }
            when 'INVALID_PASSWORD' {
              self.message('INVALID PASSWORD, please login again');
            }

          }




        }
        method message(Str $info, Str :$type = 'I') {
          my Str $icon = '';
          given $type {
            when 'I' {
              $icon = '<img src="themes/img/icons/info.png"/>';
            }
            when 'A' {
              $icon = '<img src="themes/img/icons/cancel.png"/>';
            }
            when 'E' {
              $icon = '<img src="themes/img/icons/error.png"/>';
            }
            when 'W' {
              $icon = '<img src="themes/img/icons/alert.png"/>';
            }
          }
          self.FT(tag => 'MESSAGE_BAR', text => $icon ~ '&nbsp;' ~ $info) if $info ne '';
        }
       method BEGIN-FORM(Str :$appgroup = '') {
          if $appgroup eq $C_WEBFORM { #-- form based screen
            self.FORM-OPEN();
            if $.App ne 'LOGIN' {
              self.FORM-IMG-BUTTON(key => 'press-enter',
                src => $C_ICON_OK,
                alt => 'Enter');

              self.FORM-TEXT(key => 'ucomm',
                            value => '',
                            size => '10', #%shortcut<intleng>',
                            length => '60',
                            );
              self.FORM-SPACE();
            }
          }
        }
       method END-FORM(Str :$app = '', Str :$appgroup = '') {
          if $appgroup eq $C_WEBFORM {
            self.FORM-CLOSE(app => $app);
          }
        }
        method initialize-config($Dbu, :%cfg) {
          $.Dbu = $Dbu;
          %.Config = %cfg;
         }
        method load-module($AppModule is rw, Str :$module) {
          my Bool $return-code = True;
          my Str $module-name = '';
          my Str $module-path = '';
          my Str $module-directory = $module.substr(0,1).uc;
          $module-name = $C_NAMESPACE ~ '::' ~ $module-directory ~ '::' ~ $module;
          $module-path = $C_LIBPATH ~ '/' 
                       ~ $C_NAMESPACE 
                       ~ '/' 
                       ~ $module-directory
                       ~ '/'
                       ~ $module ~ '.pm6';

          #self.TRACE: 'Module name: ' ~ $module-name ~ '; ModulePath = ' ~ $module-path;
          #-- Attempt to load module:
          if $module-path.IO.e {
            #self.TRACE: 'Attempting to load ' ~ $module-name;
            try require ::($module-name);
            if ::($module-name) ~~ Failure {
              #-- generate module
              self.TRACE: 'Failed loading ' ~ $module-name ~ ', ' ~ $!.message;
              $return-code = False;
            }
            else {
              #-- create an instance of $sModuleName
              $AppModule = ::($module-name).new;
              #self.TRACE: 'Loading... OK';
              $return-code = True;
            }
          }
          else {
            self.TRACE: 'Module file not found: ' ~ $module-path;
            $return-code = False;
          }
          return $return-code;
        }
     method get(Str :$key) {
                my $sVar = '';
                $sVar = %.PAGEVARS{$key} if defined %.PAGEVARS{$key};
                $sVar ~~ s:g/\{\{$key\}\}//;
                if $sVar eq '' {
                  #-- get $sVar from config file
                  $sVar = %.Config{$key} if defined %.Config{$key};
                  $sVar ~~ s:g/\{(.*?)\}/{ #-- Convert embedded variables
                    self.get(key => $0.Str);    #-- for example: data_dir = ./{SID}{SID_NR}/some_value
                  }/;                      #--    translates to:        ./DEV00/some_value
                }
              return $sVar;
              }
      method getenv(Str :$key) {
                my $sVar =  '';
                $sVar = %*ENV{$key.uc} if defined %*ENV{$key};
                return $sVar;
              }
      method getparam(Str :$key = '') {
                my $parameter-value = '';
                if %.Params{"$key"}:exists {
                  $parameter-value = %.Params{"$key"};
                }
                return $parameter-value;
              }
      method site-logo() {
        return '<img src="./favicon.ico"/>';
      }


    method TRACE(Str $msg, :$id = "S1", :$no = "001", :$ty = "I", :$t1 = "", :$t2 = "", :$t3 = "", :$t4 = "" ) {
          my Str $sInfo = "";

          $sInfo = $t1;
          $sInfo = $t1 ~ $msg.Str if $msg ne "";

          $.DebugInfo ~= $id ~ "-" ~ $no ~ " " ~ $ty ~ " ";
          $.DebugInfo ~= $msg ~ "<br/>" if $msg ne "";


      my $e = X::Sys::System.new(
            msg-id => $id, msg-no => $no, msg-ty => $ty,
            msg-t1 => $sInfo, msg-t2 => $t2, msg-t3 => $t3,msg-t4 => $t4);
            note $e.message;
        }

      method FT(Str :$tag, Str :$text, Int :$last) { #-- FILL-TEMPLATE
          #method FT(Str $sTag?, Str $sText?, Int $iLast?) {
          my Str $sWebPart = $tag;
          my Str $sData = $text;
          my Bool $bClearVariables = False;
          my %PageVars = ();
          $bClearVariables = True if (defined $last && $last > 0);
          %PageVars = %.PAGEVARS; #-- Set rendered variables locally
          if $bClearVariables { #-- clear all {{{VARIABLE}}} place holders
            for %PageVars -> $sVars {
              %PageVars{$sVars.key} = '';
              my $txt = %.PAGEVARS{$sVars.key};
              my $key = $sVars.key;
              $txt ~~ s:g/\{\{$key\}\}//;
              %.PAGEVARS{$sVars.key} = $txt;
            }
          }
          $sWebPart = 'PAGE_CONTENTS' if $tag eq '';
          my Str $sWPart = '';
          $sWPart = %.PAGEVARS{$sWebPart} if defined %.PAGEVARS{$sWebPart};
          $sWPart  ~~ s:g/\{\{$sWebPart\}\}// if !$bClearVariables;
          $sData = $sWPart ~ $sData ~ '{{' ~ $sWebPart.uc ~ '}}' if !$bClearVariables;
          #-- fill up page variable (append)
          %.PAGEVARS{$sWebPart} = $sData if !$bClearVariables;
          return True;
        };
        multi method render(Str :$web-part) {
          my Str $sPage = '';
          given $web-part {
            when 'BODY' {
              self.FT(tag => '', text => '', last => 1);
              $sPage = Template::Mustache.render($PAGETMPL, %.PAGEVARS);
              %.PAGEVARS = ();
            }
            when 'STYLE' {
              self.FT(tag => 'CSS_DIR', text => '/styles/' ~ self.get(key => 'CSS_DEFAULT_DIR') ~ '/' ~ self.get(key => 'CSS_DEFAULT_FILE'));
              self.FT(tag => 'CSS_DIR', text => '', last => 1);
              $sPage = Template::Mustache.render($STYLESHEET, %.PAGEVARS);
            }
            when 'JSCRIPT' {
              self.FT(tag => 'JSCRIPT_DIR', text => '/jscript/' ~ self.get(key => 'JS_DEFAULT_DIR') ~ '/' ~ self.get(key =>'JS_DEFAULT_FILE'));
              self.FT(tag => 'JSCRIPT_DIR', text => '', last => 1);
              $sPage = Template::Mustache.render($JAVASCRIPT, %.PAGEVARS);
            }
          }
          return $sPage;
        }
        method FORM-OPEN(Bool :$multipart) {
          my Str $app = '';
          $.FORM = ''; #reset form
          
          if defined $multipart {
            if $multipart {
              $.FORM ~= '<form method="POST" ';
              $.FORM ~= 'enctype="multipart/form-data">';
            }
            else {
              $.FORM ~= '<form method="POST" ';
              $.FORM ~= 'enctype="application/x-www-form-url-encoded">';
            }
          }
          else {
            $.FORM ~= '<form method="POST" ';
            $.FORM ~= 'enctype="application/x-www-form-url-encoded">';
          }
        }
        method FORM-TABLE(Str :$tag) {
          $.FORM ~= $tag;
        }
        method FORM-LINE() {
          $.FORM ~= '<hr/>';
        }
        method FORM-BREAK() {
          $.FORM ~= '<br/>';
        }
        method FORM-SKIP() {
          $.FORM ~= '<br/><br/>';
        }
        method FORM-SPACE(Int :$length) {
          if defined $length {
            if $length > 0 {
              for 1..$length {
                $.FORM ~= self.space;
              }
            }
            else {
              $.FORM ~= self.space;
            }
          }
          else {
            $.FORM ~= self.space;
          }
        }
        method FORM-FILE(:$file) {
          $.FORM ~= '<input type="file" '
                  ~  'name="' ~ $file ~ '"/>';
        }
        method FORM-HIDDEN(Str :$key, Str :$value) {
          $.FORM ~= '<input type="hidden" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'value="' ~ $value ~ '"/>';
        }
        method FORM-LABEL(Str :$key, Str :$value) {
          $.FORM ~= '<label for="' ~ $key ~ '">'
                  ~ $value ~ '<label/>' ~ self.space;
        }
        method FORM-TEXT(Str :$key, Str :$value, Str :$size, Str :$length, Bool :$hide = False) {
          my Str $sShortText = '';
          #self.TRACE: 'form-text.key = ' ~ $key ~ '; value = ' ~ $value;
          #-- TODO: validate value as per domain

          $.FORM ~= '<input type="text" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'value="' ~ $value ~ '" '
                  ~ 'size="' ~ $size ~ '" '
                  ~ 'maxlength="' ~ $length ~ '"/>';
        }
        method FORM-STRING(Str :$text = '') {
          $.FORM ~= $text if $text ne '';
        }
      method FORM-TEXTAREA(Str :$key, Str :$value, Int :$rows, Int :$cols) {
          $.FORM ~= '<textarea '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'rows="' ~ $rows.Str ~ '" '
                  ~ 'cols="' ~ $cols.Str ~ '" '
                  ~ 'wrap="virtual" '
                  ~ 'style="font-family: Courier New, Verdana, Arial, Helvetica, '
                  ~ 'sans-seif; font-size: 1em;">'
                  ~ $value
                  ~ '</textarea>';
        }
        method FORM-PASSWORD(Str :$key, Str :$value, Str :$size, Str :$length, Str :$event, Str :$action) {
          $.FORM ~= '<input type="password" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'value="' ~ $value ~ '" '
                  ~ 'size="' ~ $size ~ '" '
                  ~ 'maxlength="' ~ $length ~ '" ';
          if defined $event && defined $action {
            $.FORM ~= ' ' ~ $event ~ '="' ~ $action ~ '"';
          }
          $.FORM ~= '/>';
        }
        method FORM-IMG-BUTTON(Str :$key, Str :$src, Str :$alt, Str :$event, Str :$action, Str :$type = 'image') {
          $.FORM ~= '<input type="' ~ $type ~ '" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'src="' ~ $src ~ '" '
                  ~ 'alt="' ~ $alt ~ '"';
          if defined $event && defined $action {
            $.FORM ~= ' ' ~ $event ~ '="' ~ $action ~ '"';
          }
          $.FORM ~= '/>';
          $.FORM ~= '&nbsp;<span style="font-size:75%;">' ~ $alt ~ '</span>&nbsp;' if $alt ne '';
        }
        method FORM-BUTTON(Str :$key, Str :$value, Str :$event, Str :$action, Str :$type = 'submit') {
          $.FORM ~= '<input type="' ~ $type ~ '" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ 'value="' ~ $value ~ '"';
          if defined $event && defined $action {
            $.FORM ~= ' ' ~ $event ~ '="' ~ $action ~ '"';
          }
          $.FORM ~= '/>';
        }
      method FORM-CHECKBOX(Str :$key, Str :$value, Str :$label) {
          my $checked = '';
          $checked = 'checked="checked"' if $value.Int > 0;
          $.FORM ~= '<label><input type="checkbox" '
                  ~ 'name="' ~ $key ~ '" '
                  ~ $checked ~ '/>'
                  ~ self.space ~ $label ~ '</label>';
        }
        method FORM-OPTION(Str :$key, Str :$value, :%options, Str :$label) {
          $.FORM ~= '<label>' ~ $label ~ '</label>' ~ self.space(2);
          for %options.sort -> $option {
            $.FORM ~= '<input type="radio" name="' ~ $key
                    ~ '" value="' ~ $option.key
                    ~ '"><label>' ~ $option.value ~ self.space(2)
                    ~ '</label>' if $value ne $option.key;
          }
          my $k = %options{$value}:k;
          my $v = %options{$value}:v;
          $.FORM ~= '<input type="radio" name="' ~ $key
                  ~ '" value="' ~ $k ~ '" checked="checked">'
                  ~ '<label>' ~ $v ~ self.space(2) ~ '</label>';

        }
        method FORM-SELECT(Str :$key, Str :$value, :%options, Str :$label) {
          my Str ($table, $field) = $key.split(/\-/);
          my Str $tabname = $table.uc;
          my Str $fldname = $field.uc;
          my Str $db-file = '';
          my Str $table-field = $tabname ~ '-' ~ $fldname;
          if $.Dbu.is-field(tabname => $tabname, fldname => $fldname) {
            my %wFieldInfo = $.Dbu.field-info(field => $table-field);
            my $value-table = %wFieldInfo{'valtabl'}; 
            if $value-table ne '' {
              $db-file = $.Dbu.db-filename();
              my $dbh = $.Dbu.db-connect(dbtype => $C_DBTYPE_SQLITE, dbname => $db-file);
              if defined $dbh {
                my $sth = $dbh.prepare(qq:to/SQL/);
                  SELECT $fldname
                  FROM $value-table
                  ORDER by $fldname
                SQL
                $sth.execute;
                my @iRecords = $sth.fetchall-AoH;
                for @iRecords -> $fld {
                  my $fldvalu = $fld{$fldname.lc};
                  %options{"$fldvalu"} = $fldvalu;
                }
                $dbh.dispose;
              }
            }
          }
          $.FORM ~= '<select name="' ~ $key ~ '"> ';
          for %options -> $option {
            $.FORM ~= '<option value="' ~ $option.key ~ '">'
                    ~ $option.value ~ '</option>' if $value ne $option.key;
          }
          $.FORM ~= '<option selected="selected" value="' ~ $value ~ '">'
                  ~ %options{$value} ~ '</option>';
          $.FORM ~= '</select>';
        }
        method FORM-CLOSE(Str :$section, Str :$app = '') {
          my Str $application-id = '';
          if $app ne '' {
            $application-id = '<input type="hidden" '
                  ~ 'name="APP" '
                  ~ 'value="' ~ $app ~ '"/>';
            $.FORM ~= $application-id;
          }
          $.FORM ~= '</form>';
          if defined $section && $section ne '' {
            self.FT(tag => $section, text => $.FORM);
          }
          else {
            self.FT(tag => '', text => $.FORM);
          }
        }
        method space(Int :$length) {
          my Str $sBlank = '';
          if defined $length && $length > 0 {
            for 0..$length {
              $sBlank ~= '&nbsp;';
            }
          }
          else {
            $sBlank = '&nbsp;';
          }
          return $sBlank;
        }
        #--- begin: JAVASCRIPT - MD5
        method encrypt-field(Str $sFieldName) {
        my Str $sJavascript = '';

        $sJavascript ~= "\n" 
        ~ 'function sayAlert' ~ '_' ~ $sFieldName ~ '() {alert("Say something!!!");'
        ~ '}'
        ~ "\n" 
        ~ "\n"
        ~ 'function encryptPassword' ~ '_' ~ $sFieldName ~ '() {'
        #~ 'alert(' ~ 'document.forms[0].' ~ $sFieldName ~ '.value' ~ ');' 
        ~ 'if (document.forms[0].' ~ $sFieldName ~ '.value != "*") {'
        ~     'document.forms[0].' ~ $sFieldName ~ '.value = ' 
        ~       'hex_md5(document.forms[0].' ~ $sFieldName ~ '.value);' 
        ~  '}'
        ~ 'return true;'
        ~ '}'
        ~ "\n" 
        ~ "\n"
        ~ 'function GetRandomPassword' ~ '_' ~ $sFieldName ~ '(){' 
        ~ 'document.forms[0].' ~ $sFieldName ~ '.value=getRandomText();' 
        ~ '}'
        ~ "\n" 
        ~ "\n"
        ~ 'function str2hex_md5' ~ '_' ~ $sFieldName ~ '() {'
        ~ '	document.forms[0].' ~ $sFieldName ~ '.value = hex_md5(document.forms[0].' 
        ~ $sFieldName ~ '.value);'
        ~	'return true; }'
        ~ "\n" 
        ~ "\n"
        ~ 'function str2b64_md5' ~ '_' ~ $sFieldName ~ '() {'
        ~	'document.forms[0].' ~ $sFieldName ~ '.value = b64_md5(document.forms[0].' 
        ~ $sFieldName ~ '.value); return true;}'
        ~ 'function str2str_md5' ~ '_' ~ $sFieldName ~ '() {'
        ~ '	document.forms[0].' ~ $sFieldName ~ '.value = str_md5(document.forms[0].'
        ~ $sFieldName ~ '.value); return true;}';
        #~ 'function no_enter {'
        #~ '  if (event.keyCode==13){ return false; }'
        #~ '}';
        
        return $sJavascript;
      }
      method encrypt-md5 {
        my Str $sJavascript = '';
        $sJavascript = q:to/END_OF_SCRIPT/;

      /*
      * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
      * Digest Algorithm, as defined in RFC 1321.
      * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
      * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
      * Distributed under the BSD License
      * See http://pajhome.org.uk/crypt/md5 for more info.
      * Patch by Ron Savage 2004-04-27:
      * o Add the 3 functions str2hex_md5, str2b64_md5 and str2str_md5().
      *	Note: In V 1.02 of this module, the first function was called
      *	RetMD5 because that's what the Yahoo! programmers called it.
      */

      function getRandomText() {
        var rs=""; var Charstring="23456789ABCDEFGHJKMNPQRSTUVWXYZ"; 
        for (i=0;i<=12; i++) {
          var RandomNumber=Math.floor(Math.random()*34);
          rs = rs + Charstring.substring(RandomNumber, RandomNumber + 1);
        } return rs;
      }

      /*
      * Configurable variables. You may need to tweak these to be compatible with
      * the server-side, but the defaults work in most cases.
      */
      var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
      var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */
      var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */

      /*
      * These are the functions you'll usually want to call
      * They take string arguments and return either hex or base-64 encoded strings
      */

      function hex_md5(s) { return binl2hex(core_md5(str2binl(s), s.length * chrsz));}

      function b64_md5(s) { return binl2b64(core_md5(str2binl(s), s.length * chrsz));}

      function str_md5(s) { return binl2str(core_md5(str2binl(s), s.length * chrsz));}

      function hex_hmac_md5(key, data) { return binl2hex(core_hmac_md5(key, data)); }

      function b64_hmac_md5(key, data) { return binl2b64(core_hmac_md5(key, data)); }

      function str_hmac_md5(key, data) { return binl2str(core_hmac_md5(key, data)); }

      /*
      * Perform a simple self-test to see if the VM is working
      */
      function md5_vm_test() {
        return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
      }

      /*
      * Calculate the MD5 of an array of little-endian words, and a bit length
      */
      function core_md5(x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var a =  1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d =  271733878;

        for(var i = 0; i < x.length; i += 16)
        {
          var olda = a;
          var oldb = b;
          var oldc = c;
          var oldd = d;

          a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
          d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
          c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
          b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
          a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
          d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
          c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
          b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
          a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
          d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
          c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
          b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
          a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
          d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
          c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
          b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

          a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
          d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
          c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
          b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
          a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
          d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
          c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
          b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
          a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
          d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
          c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
          b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
          a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
          d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
          c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
          b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

          a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
          d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
          c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
          b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
          a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
          d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
          c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
          b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
          a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
          d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
          c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
          b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
          a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
          d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
          c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
          b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

          a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
          d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
          c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
          b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
          a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
          d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
          c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
          b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
          a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
          d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
          c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
          b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
          a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
          d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
          c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
          b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

          a = safe_add(a, olda);
          b = safe_add(b, oldb);
          c = safe_add(c, oldc);
          d = safe_add(d, oldd);
        }
        return Array(a, b, c, d);
      }

      /*
      * These functions implement the four basic operations the algorithm uses.
      */
      function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
      }

      function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
      }

      function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
      }

      function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
      }

      function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
      }

      /*
      * Calculate the HMAC-MD5, of a key and some data
      */
      function core_hmac_md5(key, data) {
        var bkey = str2binl(key);
        if(bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);

        var ipad = Array(16), opad = Array(16);
        for(var i = 0; i < 16; i++) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }

        var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
        return core_md5(opad.concat(hash), 512 + 128);
      }

      /*
      * Add integers, wrapping at 2^32. This uses 16-bit operations internally
      * to work around bugs in some JS interpreters.
      */
      function safe_add(x, y)
      {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
      }

      /*
      * Bitwise rotate a 32-bit number to the left.
      */
      function bit_rol(num, cnt)
      {
        return (num << cnt) | (num >>> (32 - cnt));
      }

      /*
      * Convert a string to an array of little-endian words
      * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
      */
      function str2binl(str)
      {
        var bin = Array();
        var mask = (1 << chrsz) - 1;
        for(var i = 0; i < str.length * chrsz; i += chrsz)
          bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
        return bin;
      }

      /*
      * Convert an array of little-endian words to a string
      */
      function binl2str(bin)
      {
        var str = "";
        var mask = (1 << chrsz) - 1;
        for(var i = 0; i < bin.length * 32; i += chrsz)
          str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
        return str;
      }

      /*
      * Convert an array of little-endian words to a hex string.
      */
      function binl2hex(binarray)
      {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for(var i = 0; i < binarray.length * 4; i++)
        {
          str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
        }
        return str;
      }

      /*
      * Convert an array of little-endian words to a base-64 string
      */
      function binl2b64(binarray)
      {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var str = "";
        for(var i = 0; i < binarray.length * 4; i += 3)
        {
          var triplet = (((binarray[i   >> 2] >> 8 * ( i   %4)) & 0xFF) << 16)
                      | (((binarray[i+1 >> 2] >> 8 * ((i+1)%4)) & 0xFF) << 8 )
                      |  ((binarray[i+2 >> 2] >> 8 * ((i+2)%4)) & 0xFF);
          for(var j = 0; j < 4; j++)
          {
            if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
            else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
          }
        }
        return str;
      }

      END_OF_SCRIPT
        return $sJavascript;
      }

        #-- end: JAVASCRIPT - MD5
    };

